####  关于APK瘦身值得分享的一些经验  
1. 从APK的文件结构说起. 
APK在安装和更新之前都需要经过网络将其下载到手机，APK越大消耗的流量就会越多，特别是对于使用移动网络的用户来讲，消耗流量 越多就代表需要花更多的钱去购买流量。同时一些第三方应用商城也会对上传的APK大小有限制，所以为了能够让产品能够更受商城和用 户欢迎，APK瘦身是第一步，更小的APK标示着更多地用户愿意去下载和体验。
为了能够减小APK的大小，首先需要知道APK由哪些部分构成，然后针对每个部分做相应的优化工作，下图是一个APK解压后的文件结构: 各文件的介绍如下:  
classes.dex:classes.dex是java源码编译后生成的java字节码文件。但由于Android使用的dalvik虚拟机与标准的java虚拟机是不 兼容的，dex文件与class文件相比，不论是文件结构还是opcode都不一样。目前常见的java反编译工具都不能处理dex文件。 Android模拟器中提供了一个dex文件的反编译工具，dexdump。用法为首先启动Android模拟器，把要查看的dex文件用adb push上传的模拟器中，然后通过adb shell登录，找到要查看的dex文件，执行dexdump xxx.dex。另，有人介绍到Dedexer是目 前在网上能找到的唯一一个反编译dex文件的开源工具，需要自己编译源代码。  
resources.arsc:编译后的二进制资源文件.   
AndroidManifest.xml:该文件是每个应用都必须定义和包含的，它描述了应用的名字、版本、权限、引用的库文件等等信息， 如要把apk上传到Google Market上，也要对这个xml做一些配置。在apk中的AndroidManifest.xml是经过压缩的，可以通过 AXMLPrinter2工具解开，具体命令为:java -jar AXMLPrinter2.jar AndroidManifest.xml. 
proguard.cfg:代码混淆配置文件;    
project.properties:标示APK的target sdk和依赖关系，这里的依赖关系指示的是该APK依赖到了哪些工程;    
assets:assets目录可以存放一些配置文件(比如webview本地资源、图片资源等等)，这些文件的内容在程序运行过程中可以通 过相关的API获得。具体的方法可以参考SDK中的例子:在sdk的 \SDK\1.6\android-sdk-windows-1.6_r1\platforms\android- 1.6\samples\ApiDemos 例子中，有个com.example..android.apis.content 的例子，在这个例子中他把一个text文件放到工程的 asset目录下，然后把这个txt当作普通文件处理。处理的过程在ReadAsset.java中。同理，asset也可以放置其他文件。    
lib:*lib目录下的子目录armeabi存放的是一些so文件。这个地方多讲几句，都是在开发过程中摸索出来的。eclipse在打包的时候 会根据文件名的命名规则(lib*.so)去打包so文件，开头和结尾必须分别为“lib”和“.so”，否则是不会打包到apk文件中的。其 他非eclipse开发环境没有测试过。如果你是用SDK和NDK开发的话，这部分很重要，甚至可以通过把一些不是so文件的文件通过 改名打包到apk中，具体能干些什么那就看你想干什么了，呵呵呵!    
META-INF:META-INF目录下存放的是签名信息，用来保证apk包的完整性和系统的安全。在eclipse编译生成一个apk包时，会 对所有要打包的文件做一个校验计算，并把计算结果放在META-INF目录下。这就保证了apk包里的文件不能被随意替换。比如拿 到一个apk包后，如果想要替换里面的一幅图片，一段代码， 或一段版权信息，想直接解压缩、替换再重新打包，基本是不可能 的。如此一来就给病毒感染和恶意修改增加了难度，有助于保护系统的安全。  
res:res目录存放资源文件。包括图片、字符串、raw文件夹下面的音频文件、各种xml文件等等。 从图一可知，APK中classes.dex、lib、资源文件是大头，APK瘦身主要就是优化这三个文件，关于这三个文件比较成熟的优化方法有:  
classes.dex:通过代码混淆，减小类名、方法名和变量的名长度;删掉不必要的jar包和代码实现该文件的优化;  
lib:一个硬件设备对应一种架构(mips、arm或者x86)，只保留与设备架构相关的库文件夹(主流的架构都是arm的，mips属于小 众，默认也是支持arm的so的，但x86的不支持)，这样可以大大降低lib文件夹的大小(提醒一下:genymotion安卓模拟器之所 以快，是因为它是基于x86架构的，如果你的工程有arm或者mips的so，需要通过给这个模拟器安装必要的插件才能让apk正常运 行起来，反正我装这玩意是没成功过，所以就不推荐具体的实现方法了，感兴趣的可以自己Google);  
资源文件:通过Lint工具扫描中没有使用到的静态资源。 上面介绍的三种类型文件的优化方案的确能够在一定程度上减小APK的大小，但在最近做项目的过程中经过研究发现还可以更进一步优化
APK的大小，具体方案如下:  
多分辨率适配:我之前写过一篇关于多分辨率适配的文章Android多分辨率适配经验总结,一套图、一套布局，多套dimens.xml文 件，在使用最小资源的情况下搞定多分辨率适配;  
预置数据:和游戏一样，程序和数据分离，进入模块时下载预置数据(下载的策略需要注重用户体验，在需要使用数据的地方下 载，甚至音效都可以考虑下载);  
图片资源:使用tinypng和webP，下面详细介绍图片资源优化的方案。
